# import sys
# # source_coords=[int(i) for i in sys.argv[1].split(',')]
# # destination_coords= [int(i) for i in sys.argv[2].split(',')]
# # print(source_coords)

from netCDF4 import Dataset
import Cost
from Cost import env_factors
import matplotlib.pyplot as plt
import numpy as np
from mpl_toolkits.basemap import Basemap

filepath  = r"C:\Users\91807\Downloads\data_iiit-varoda\data_iiit-varoda\ww3_fcs_glo_1.0.nc"
fh=Dataset(filepath,mode="r")
data=env_factors()
fh=data.file
lons = fh.variables['lon'][65:85]#40,91
lats = fh.variables['lat'][70:95]#70,101
waveheight = fh.variables['hs'][:]
fig=plt.figure()
mp = Basemap(projection ='merc',llcrnrlon=40,llcrnrlat=0,urcrnrlon=90,urcrnrlat=40,resolution = "i")
lon,lat = np.meshgrid(lons,lats)
x,y = mp(lon,lat)
c_scheme=mp.pcolor(x,y,np.squeeze(waveheight[0,70:95,65:85]),cmap='ocean')

mp.drawcoastlines(color='white',linewidth=1)
mp.bluemarble()
fig.canvas.draw()

cbar = mp.colorbar(c_scheme,location='right',pad='10%')
lat=[]
lon=[]

path=[[(10, 82), (10, 81), (10, 80), (9, 79), (8, 78), (9, 75), (12, 73), (15, 71), (16, 70)]]
path2=[[(10, 82), (8, 79), (9, 76), (10, 74), (13, 72), (16, 70)]]
path3=[[(10, 82), (9, 82), (8, 82), (7, 82), (6, 82), (6, 81), (6, 80), (6, 79), (7, 79), (8, 79), (8, 78), (8, 77), (8, 76), (9, 76), (10, 76), (10, 75), (11, 75), (12, 75), (12, 74), (13, 74), (14, 74), (15, 74), (15, 73), (16, 73), (16, 72), (16, 71), (16, 
70)],[(10, 82), (10, 81), (10, 80), (9, 79), (8, 78), (8, 77), (9, 76), (10, 76), (11, 75), (12, 74), (13, 73), (14, 72), (15, 
71), (16, 70)],[(10, 82), (10, 81), (10, 80), (9, 79), (8, 78), (9, 75), (12, 73), (15, 71), (16, 70)],[(10, 82), (10, 81), (10, 80), (9, 79), (8, 78), (9, 75), (12, 73), (16, 70)]]


path_0=[[(10, 82), (9, 82), (8, 82), (7, 82), (6, 82), (6, 81), (6, 80), (6, 79), (7, 79), (8, 79), (8, 78), (8, 77), (8, 76), (9, 76), (10, 76), (10, 75), (11, 75), (12, 75), (12, 74), (13, 74), (14, 74), (15, 74), (15, 73), (16, 73), (16, 72), (16, 71), (16, 70)]]
path_1=[[(10, 82), (10, 81), (10, 80), (9, 79), (8, 78), (8, 77), (9, 76), (10, 76), (11, 75), (12, 74), (13, 
73), (14, 72), (15, 71), (16, 70)]]
path_2=[[(10, 82), (10, 81), (10, 80), (9, 79), (8, 78), (8, 77), (9, 76), (11, 75), (13, 74), (14, 73), (15, 72), (16, 70)]]
path_3=[[(10, 82), (10, 81), (10, 80), (9, 79), (8, 78), (9, 75), (12, 73), (15, 71), (16, 70)]]

explored_0=[(18, 72), (7, 72), (12, 68), (23, 68), (6, 82), (4, 73), (17, 67), (19, 64), (3, 77), 
(5, 74), (8, 73), (10, 70), (9, 72), (11, 69), (8, 82), (2, 75), (13, 72), (15, 69), (6, 66), (18, 65), (21, 64), (7, 65), (6, 75), (7, 74), (7, 83), (3, 70), (17, 69), (19, 66), (8, 66), (9, 65), (5, 67), (5, 76), (8, 75), (10, 63), (9, 74), (11, 71), (9, 83), (13, 65), (15, 62), (13, 74), (15, 71), (6, 68), (16, 70), (18, 67), (7, 67), (21, 66), (6, 77), (7, 76), (22, 67), (17, 62), (14, 72), (17, 71), (19, 68), (8, 68), (9, 67), (5, 69), (5, 78), (3, 72), (11, 64), (9, 76), (11, 73), (13, 67), (15, 64), (24, 67), (16, 63), (15, 73), (6, 70), (16, 72), (18, 69), (7, 69), 
(21, 68), (7, 78), (20, 72), (22, 69), (14, 65), (17, 64), (14, 74), (17, 73), (19, 70), (5, 71), (9, 69), (11, 66), (5, 80), (3, 74), (11, 75), (13, 69), (15, 66), (16, 65), (18, 62), (18, 71), (7, 71), (20, 65), (12, 70), (14, 67), (17, 66), (19, 63), (3, 76), (5, 73), (4, 75), (9, 71), (11, 68), (5, 82), (13, 62), (10, 72), (13, 71), (15, 68), (16, 67), (18, 64), (10, 81), (18, 73), (7, 73), (20, 67), (7, 82), (12, 63), (12, 72), (14, 69), (17, 68), (3, 69), (4, 68), (9, 64), (3, 78), (5, 75), (4, 77), (9, 73), (10, 65), (13, 64), (15, 61), (8, 77), (10, 74), (13, 73), (15, 70), (2, 70), (16, 69), (18, 66), (7, 66), (1, 71), (16, 60), (10, 83), (7, 75), (11, 82), (20, 69), (22, 66), (12, 65), (6, 79), (14, 62), (17, 61), (12, 74), (14, 71), (3, 71), (4, 70), (5, 68), (9, 66), (5, 77), (4, 79), 
(8, 70), (10, 67), (13, 66), (15, 63), (8, 79), (10, 76), (16, 62), (2, 72), (16, 71), (18, 68), (7, 68), (6, 72), 
(20, 71), (22, 68), (21, 70), (12, 67), (14, 64), (6, 81), (23, 67), (14, 73), (5, 70), (4, 72), (3, 73), (19, 72), 
(10, 69), (13, 68), (8, 72), (16, 64), (2, 74), (16, 73), (20, 64), (6, 74), (21, 72), (12, 69), (14, 66), (6, 83), (3, 75), (4, 74), (19, 65), (8, 65), (8, 74), (10, 71), (11, 70), (16, 66), (18, 63), (8, 83), (9, 82), (6, 67), (20, 66), (21, 65), (12, 62), (6, 76), (12, 71), (14, 68), (3, 68), (4, 67), (4, 76), (17, 70), (19, 67), (8, 67), (13, 63), (10, 64), (11, 63), (8, 76), (10, 73), (9, 75), (11, 72), (1, 70), (16, 68), (2, 69), (10, 82), (15, 72), (6, 69), 
(20, 68), (22, 65), (21, 67), (12, 64), (6, 78), (14, 61), (7, 77), (12, 73), (14, 70), (4, 69), (17, 63), (4, 78), 
(17, 72), (19, 69), (8, 69), (9, 68), (10, 66), (11, 65), (8, 78), (10, 75), (5, 79), (11, 74), (16, 61), (2, 71), (15, 65), (15, 74), (6, 71), (20, 70), (18, 70), (7, 70), (21, 69), (12, 66), (14, 63), (7, 79), (6, 80), (12, 75), (23, 66), (4, 71), (17, 65), (4, 80), (5, 72), (19, 71), (8, 71), (9, 70), (10, 68), (11, 67), (5, 81), (9, 79), 
(2, 73), (13, 70), (15, 67), (20, 63), (6, 73)]
explored_1=[(18, 72), (12, 68), (17, 67), (8, 73), (10, 70), (9, 72), (11, 69), (13, 72), (15, 69), (7, 74), (17, 69), (8, 75), (9, 74), (11, 71), (9, 83), (11, 80), (13, 74), (15, 71), 
(16, 70), (18, 67), (6, 77), (7, 76), (14, 72), (17, 71), (19, 68), (9, 76), (11, 73), (13, 67), (15, 73), (16, 72), (18, 69), (7, 78), (20, 72), (14, 74), (17, 73), (19, 70), (11, 75), (13, 69), (18, 71), (12, 70), (14, 67), (9, 71), (11, 68), (10, 72), (13, 71), (15, 68), (16, 67), (10, 81), (18, 73), (12, 72), 
(14, 69), (17, 68), (9, 73), (8, 77), (10, 74), (13, 73), (15, 70), (16, 69), (10, 83), (11, 82), (7, 75), (20, 69), (6, 79), (12, 74), (14, 71), (8, 79), (10, 76), (16, 71), (18, 68), (20, 71), (12, 67), (14, 
73), (19, 72), (10, 69), (13, 68), (8, 72), (16, 73), (12, 69), (8, 74), (10, 71), (11, 70), (10, 80), (9, 82), (12, 71), (14, 68), (17, 70), (19, 67), (8, 76), (10, 73), (9, 75), (11, 72), (16, 68), (10, 82), 
(11, 81), (15, 72), (6, 78), (7, 77), (12, 73), (14, 70), (17, 72), (19, 69), (8, 78), (10, 75), (11, 74), (11, 83), (15, 74), (20, 70), (18, 70), (7, 79), (12, 75), (19, 71), (9, 70), (9, 79), (13, 70), (15, 67)]
explored_2=[(18, 72), (7, 72), (12, 68), (17, 67), (8, 73), (10, 70), (9, 72), (11, 69), (13, 72), (15, 69), (6, 75), (7, 74), (17, 69), (5, 76), (8, 75), (9, 74), (11, 71), (9, 83), (11, 80), (13, 74), 
(15, 71), (16, 70), (18, 67), (6, 77), (7, 76), (14, 72), (17, 71), (19, 68), (5, 78), (9, 76), (11, 73), (13, 67), (15, 73), (16, 72), (18, 69), (7, 78), (20, 72), (14, 74), (17, 73), (19, 70), (9, 69), (11, 66), (5, 80), (11, 75), (13, 69), (15, 66), (18, 71), (7, 71), (12, 70), (14, 67), (17, 66), (9, 71), (11, 68), (10, 72), (13, 71), (15, 68), (16, 67), (10, 81), (18, 73), (7, 73), (12, 72), (14, 69), (17, 68), (12, 81), (5, 75), (9, 73), (8, 77), (10, 74), (13, 73), (15, 70), (16, 69), (18, 66), (10, 83), (11, 82), (7, 75), (20, 69), (6, 79), (12, 74), (14, 71), (12, 83), (5, 77), (8, 70), (10, 67), (13, 66), (8, 79), (10, 76), (16, 71), (18, 68), (11, 84), (20, 71), (21, 70), (12, 67), (14, 73), (19, 72), (8, 72), (13, 68), (10, 69), (16, 73), (6, 74), (21, 72), 
(12, 69), (14, 66), (8, 74), (10, 71), (11, 70), (16, 66), (10, 80), (9, 82), (8, 83), (6, 76), (12, 71), (14, 68), (12, 80), (17, 70), (19, 67), (8, 76), (10, 73), (9, 75), (11, 72), (16, 68), (10, 82), (9, 84), (11, 81), (15, 72), (20, 68), (6, 78), (7, 77), (12, 73), (14, 70), (12, 82), (17, 72), (19, 69), (5, 79), (8, 78), (10, 75), (11, 74), (11, 83), (15, 74), (20, 70), (18, 70), (21, 69), (12, 66), (6, 80), (7, 79), (12, 75), (19, 71), (8, 71), (9, 70), (10, 68), (11, 67), (9, 79), (13, 70), (15, 67), (6, 73)]
explored_3=[(18, 72), (7, 72), (12,68), (17, 67), (5, 74), (8, 73), (10, 70), (9, 72), (11, 69), (13, 72), (15, 69), (18, 65), (13, 81), (6, 75), (7, 74), (7, 83), (17, 69), (19, 66), (5, 76), (8, 75), (9, 74), (11, 71), (9, 83), (13, 65), (11, 80), (11, 85), (13, 74), (15, 71), (16, 70), (18, 67), (13, 83), (6, 77), (7, 76), (14, 72), (17, 71), (19, 68), (8, 68), (9, 67), (12, 84), (5, 78), (9, 76), (11, 73), (9, 85), (13, 67), (15, 73), (6, 70), (16, 72), (18, 69), (21, 68), (7, 69), (7, 78), (20, 72), (22, 69), (14, 65), (14, 74), (17, 73), (19, 70), (9, 69), (11, 66), (5, 80), (11, 75), (13, 69), (15, 66), (16, 65), (18, 71), (7, 71), (12, 70), (14, 67), (17, 66), (5, 73), (4, 75), (9, 71), (11, 68), (10, 72), (13, 71), (15, 68), (16, 67), (10, 81), (8, 84), (18, 73), (7, 73), (20, 67), (12, 72), (14, 69), (17, 68), (12, 81), (5, 75), (4, 77), (9, 73), (8, 77), (10, 74), (13, 73), (15, 70), (16, 69), (18, 66), (13, 82), (11, 82), (10, 83), (7, 75), (20, 69), (12, 65), (6, 79), (12, 74), (14, 71), (12, 83), (5, 77), (4, 79), (8, 70), (10, 67), (13, 66), (8, 79), (10, 76), (16, 71), (18, 68), (11, 84), (6, 72), (20, 71), (21, 70), (12, 67), (6, 81), (14, 73), (12, 85),
(19, 72), (10, 69), (13, 68), (8, 72), (16, 73), (6, 74), (21, 72), (12, 69), (14, 66), (4, 74), (19, 65), (8, 74),
(10, 71), (11, 70), (16, 66), (10, 80), (9, 82), (8, 83), (20, 66), (6, 76), (12, 71), (14, 68), (7, 84), (12, 80), (4, 76), (17, 70), (19, 67), (8, 76), (10, 73), (9, 75), (11, 72), (16, 68), (10, 82), (9, 84), (11, 81), (8, 85), (15, 72), (20, 68), (21, 67), (13, 84), (6, 78), (7, 77), (12, 73), (14, 70), (12, 82), (4, 78), (17, 72), (19, 69), (8, 69), (9, 68), (10, 66), (5, 79), (8, 78), (10, 75), (11, 65), (11, 74), (11, 83), (15, 65), (15, 74), (6, 71), (20, 70), (18, 70), (21, 69), (12, 66), (7, 70), (6, 80), (7, 79), (12, 75), (17, 65), (4, 80), (5, 72), (19, 71), (8, 71), (9, 70), (10, 68), (11, 67), (5, 81), (9, 79), (13, 70), (15, 67), (6, 73)]
count=0
colors=['white','red','blue','yellow']
for j in path_0:
    lat=[]
    lon=[]
    for i in j:
        lat.append(i[0])
        lon.append(i[1])
        
    x, y = mp(lon, lat)
    plot_handle, = mp.plot(x, y,marker='.',linewidth=2,color=colors[count])

    lat=[]
    lon=[]
    for i in explored_0:
        lat.append(i[0])
        lon.append(i[1])
    x, y = mp(lon, lat)
    plot_handle, = mp.plot(x,y,marker='.',linewidth=0,color='red')

    fig.canvas.draw()
    count=count+1
plt.savefig('EMG {0}.jpg'.format(count))

# import matplotlib.pyplot as plt

# a = range(40,85,1)
# b= range(0,30,1)
# fig, ax = plt.subplots()
# for i in b:
#     for j in a:
#         #plt.plot
#         if(env_factors().avg_hs()[i+70][j]<=0):
#             ax.plot(j,i,'yo')
#         else:
#             ax.plot(j,i,'bo')

# path2=[(10, 82), (10, 81), (10, 80), (9, 79), (8, 78), (9, 75), (12, 73), (15, 71), (16, 70)]
# for i in path2:
#     ax.plot(i[1],i[0],'ro')
# plt.show()
# sys.exit()

# def checkcoprime( a, b):
#     if (a == 0 or b == 0): return 0
#     if (a == b): return a==1
#     if (a > b): return checkcoprime(a-b, b)
#     return checkcoprime(a, b-a)

# def permuts(j,i):
#     li=set()
#     for s in [-1,1]:
#         li.update({(j*s,i),(i*s,j),(j,i*s),(i,j*s),(i*s,j*s),(j*s,i*s)})
#     return list(li)

# def neighbours(n):   
#     all_neighbours=[[(0, 1), (-1, 0), (1, 0), (0, -1)]]
#     for i in range(1,n+1):
#         block=[]
#         for j in range(0,i+1):
#             if(checkcoprime(j,i)):
#                 block.append(permuts(j,i))
#         block=sum(block,[])  
#         all_neighbours.append(block)
#     all_neighbours=sum(all_neighbours,[])
#     return all_neighbours

# def possibs(i,j,n):
#     li=[]
#     neighs=neighbours(n)
#     for c in neighs:
#         li.append((c[0]+i,c[1]+j))
#     print(possibs)
#     return li

# def check_pair(pair):
#     if(pair[0]<=70 and pair[0]>=-70):
#         if(pair[1]>=0 and pair[1]<360 and avg_hs[70+pair[0]][pair[1]]>=0):
#             return True
#     return False

# avg_hs=env_factors().avg_hs()
# possibilities=possibs(9,79,3) #8,77
# nghbr_type=3
# ans=[]
# for pair in possibilities:
#     if(check_pair(pair)):
        
#         flag=0
#         s=(9,79)
#         d=pair
#         dy=d[1]-s[1] #if dy=0 that means there are no vcuts
#         dx=d[0]-s[0]
#         if(nghbr_type>=2 and ((abs(dy)+abs(dx))>2)):

#             vcuts=[i+0.5 for i in range(min(s[0],d[0]),max(s[0],d[0]))]#x
#             hcuts=[i+0.5 for i in range(min(s[1],d[1]),max(s[1],d[1]))]#y
#             #there might be a intersection point cut, as we are considering 
#             #pixels and centre of them as position of vessel, 
#                 #if dx=0 that means there are no hcuts
#             slope=dy/dx
#             if dy>0 and dx>0:
#                 movement=[1,1]
#             elif dy>0 and dx<0:
#                 movement=[-1,1]
#             elif dy<0 and dx<0:
#                 movement=[-1,-1]
#             else:
#                 movement=[1,-1]

#             li = [[(x,slope*(x-s[0])+s[1]),(slope*(x-s[0])+s[1])**2+x*x,'v'] for x in vcuts]#dist from source
#             li=li+[[((y-s[1])/slope+s[0],y),((y-s[1])/slope+s[0])**2+y*y,'h'] for y in hcuts]
#             li=sorted(li, key=lambda x: x[1])
#             points=[]
#             temp=list(s)
#             for k in li:
#                 if(k[2]=='h'):
#                     points.append([temp[0],temp[1]+movement[1]])
#                     temp[1]=temp[1]+movement[1]
#                 if(k[2]=='v'):
#                     points.append([temp[0]+movement[0],temp[1]])
#                     temp[0]=temp[0]+movement[0]
            
#             for m in points:
#                 if not check_pair(m):
#                     flag=1

#         if flag!=1:
#             ans.append(pair)
# print(ans)



# if(nghbr_type>=2 and ((abs(dy)+abs(dx))>2)):
                                    
#                                     vcuts=[i+0.5 for i in range(min(s[0],d[0]),max(s[0],d[0]))]#x
#                                     hcuts=[i+0.5 for i in range(min(s[1],d[1]),max(s[1],d[1]))]#y
#                                     #there might be a intersection point cut, as we are considering 
#                                     #pixels and centre of them as position of vessel, 
#                                         #if dx=0 that means there are no hcuts
#                                     slope=dy/dx
#                                     if dy>0 and dx>0:
#                                         movement=[1,1]
#                                     elif dy>0 and dx<0:
#                                         movement=[-1,1]
#                                     elif dy<0 and dx<0:
#                                         movement=[-1,-1]
#                                     else:
#                                         movement=[1,-1]

#                                     li = [[(x,slope*(x-s[0])+s[1]),(slope*(x-s[0])+s[1])**2+x*x,'v'] for x in vcuts]#dist from source
#                                     li=li+[[((y-s[1])/slope+s[0],y),((y-s[1])/slope+s[0])**2+y*y,'h'] for y in hcuts]
#                                     li=sorted(li, key=lambda x: x[1])
#                                     points=[]
#                                     temp=list(s)
#                                     for k in li:
#                                         if(k[2]=='h'):
#                                             points.append([temp[0],temp[1]+movement[1]])
#                                             temp[1]=temp[1]+movement[1]
#                                         if(k[2]=='v'):
#                                             points.append([temp[0]+movement[0],temp[1]])
#                                             temp[0]=temp[0]+movement[0]
                                    
#                                     for m in points:
#                                         if not self.check_pair(m):
#                                             flag=1
#                                             break                               
                                